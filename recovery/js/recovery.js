// Generated by CoffeeScript 1.7.1
var activeButton, activeCounty, activeDimension, addCommas, allCountyData, axis, axisk, bb, blockContextMenu, canvasHeight, canvasWidth, color, colorDomains, compressData, compressedData, constant, containsAll, counties, countyAdded, countyLine, countyPoints, countyTitle, defaultPath, dimension, dimensions, drawPC, drawVisualization, firstTime, formatk, formats, generateLabels, graphContainer, graphFrame, graphLine, graphMask, graphXAxis, graphXScale, graphYAxis, graphYScale, indicator, keyFrame, keyLabels, labels, line, loadingContainer, mapContainer, mapFrame, mapMask, mapX, mapY, modifyGraph, nationalData, nationalLine, nationalPoints, nationalTitle, parseDate, path, pcBackground, pcBrush, pcFocus, pcForeground, pcFrame, pcNational, pcPath, pcScales, pcx, pcy, projection, resetChoropleth, scaleY, standardMargin, svg, timeSlice, units, usGeo, vsText, windowHeight, windowWidth, yAxis, yLabel, zeroes, zoomChoropleth, zoomedCounty, _i, _len, _ref, _ref1, _ref2;

windowWidth = 0.95 * window.innerWidth;

windowHeight = 0.8 * window.innerHeight;

standardMargin = windowHeight * (20 / 800);

canvasWidth = windowWidth - 2 * standardMargin;

canvasHeight = canvasWidth * 0.45;

d3.select("body").style("font-size", "" + ((canvasWidth / 1558.68) * 16) + "px");

svg = d3.select("#visualization").append("svg").attr("width", canvasWidth + 2 * standardMargin).attr("height", canvasHeight + 3 * standardMargin).append("g").attr("transform", "translate(" + standardMargin + ", " + standardMargin + ")");

constant = {
  rightMargin: canvasWidth * (500 / 1600),
  leftMargin: canvasWidth * (100 / 1600),
  verticalSeparator: canvasHeight * (20 / 800),
  horizontalSeparator: canvasWidth * (30 / 1600),
  graphClipHorizontalOffset: canvasWidth * (9 / 1600),
  graphClipVerticalOffset: canvasHeight * (50 / 800),
  zoomBox: standardMargin * 2,
  stateBorderWidth: 1,
  recolorDuration: 1000,
  choroplethDuration: 750,
  graphDuration: 500,
  graphDurationDimSwitch: 1000,
  snapbackDuration: 500,
  nationalTitleOffset: -75,
  vsOffset: -8,
  countyTitleOffset: 5,
  labelY: canvasHeight * (7 / 800),
  tooltipOffset: canvasWidth * (5 / 1600),
  pcOffset: 0.2,
  handleRadius: canvasWidth * 0.0047
};

dimensions = ['MedianListPrice', 'MedianListPricePerSqft', 'PctOfListingsWithPriceReductions', 'MedianPctOfPriceReduction', 'ZriPerSqft'];

labels = {
  'MedianListPrice': "Median list price ($)",
  'MedianListPricePerSqft': "Median list price / ft² ($)",
  'PctOfListingsWithPriceReductions': "Listings with price cut (%)",
  'MedianPctOfPriceReduction': "Median price reduction (%)",
  'ZriPerSqft': "Median rent price / ft² ($)"
};

units = {
  'MedianListPrice': '$',
  'MedianListPricePerSqft': '$',
  'PctOfListingsWithPriceReductions': '%',
  'MedianPctOfPriceReduction': '%',
  'ZriPerSqft': '$'
};

colorDomains = {
  'MedianListPrice': [0, 70000, 90000, 100000, 150000, 200000, 250000, 500000, 2000000],
  'MedianListPricePerSqft': [0, 20, 40, 60, 100, 200, 300, 500, 1500],
  'PctOfListingsWithPriceReductions': [0, 5, 10, 20, 25, 30, 35, 40, 100],
  'MedianPctOfPriceReduction': [0, 2, 4, 6, 8, 10, 15, 20, 100],
  'ZriPerSqft': [0, 0.25, 0.5, 0.75, 1, 1.5, 2, 3, 5]
};

formats = {
  'MedianListPrice': d3.format("$,g"),
  'MedianListPricePerSqft': function(d) {
    return "" + (d3.format("$,.2f")(d));
  },
  'PctOfListingsWithPriceReductions': function(d) {
    return "" + (d3.format(".1f")(d)) + "%";
  },
  'MedianPctOfPriceReduction': function(d) {
    return "" + (d3.format(".1f")(d)) + "%";
  },
  'ZriPerSqft': function(d) {
    return "" + (d3.format("$,.2f")(d));
  }
};

formatk = d3.format(".2s");

addCommas = function(number) {
  return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};

generateLabels = function() {
  var dimension, i, keyLabels, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
  keyLabels = {};
  for (_i = 0, _len = dimensions.length; _i < _len; _i++) {
    dimension = dimensions[_i];
    keyLabels[dimension] = [];
    if (units[dimension] === '$') {
      if (dimension === 'MedianListPrice') {
        _ref = d3.range(colorDomains[dimension].length - 1);
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          i = _ref[_j];
          keyLabels[dimension].push("$" + (formatk(colorDomains[dimension][i])) + " - $" + (formatk(colorDomains[dimension][i + 1])));
        }
      } else {
        _ref1 = d3.range(colorDomains[dimension].length - 1);
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          i = _ref1[_k];
          keyLabels[dimension].push("$" + (addCommas(colorDomains[dimension][i])) + " - $" + (addCommas(colorDomains[dimension][i + 1])));
        }
      }
    } else {
      _ref2 = d3.range(colorDomains[dimension].length - 1);
      for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
        i = _ref2[_l];
        keyLabels[dimension].push("" + (addCommas(colorDomains[dimension][i])) + "% - " + (addCommas(colorDomains[dimension][i + 1])) + "%");
      }
    }
  }
  return keyLabels;
};

keyLabels = generateLabels();

pcScales = {
  'MedianListPrice': [colorDomains['MedianListPrice'][8], colorDomains['MedianListPrice'][0]],
  'MedianListPricePerSqft': [colorDomains['MedianListPricePerSqft'][8], colorDomains['MedianListPricePerSqft'][0]],
  'PctOfListingsWithPriceReductions': [colorDomains['PctOfListingsWithPriceReductions'][8], colorDomains['PctOfListingsWithPriceReductions'][0]],
  'MedianPctOfPriceReduction': [colorDomains['MedianPctOfPriceReduction'][8], colorDomains['MedianPctOfPriceReduction'][0]],
  'ZriPerSqft': [colorDomains['ZriPerSqft'][8], colorDomains['ZriPerSqft'][0]]
};

activeDimension = dimensions[0];

activeButton = d3.select(".btn").style("color", "#000").style("background-color", "#fff");

_ref = [{}, null, null, null], nationalData = _ref[0], allCountyData = _ref[1], usGeo = _ref[2], timeSlice = _ref[3];

_ref1 = [null, null, null, null, null, null, null, null, null, null], counties = _ref1[0], yAxis = _ref1[1], nationalTitle = _ref1[2], vsText = _ref1[3], countyTitle = _ref1[4], yLabel = _ref1[5], nationalLine = _ref1[6], nationalPoints = _ref1[7], countyLine = _ref1[8], countyPoints = _ref1[9];

bb = {
  map: {
    x: 0,
    y: 0,
    width: canvasWidth - constant.rightMargin - constant.rightMargin * 1 / 2,
    height: canvasHeight * (3 / 4)
  },
  graph: {
    x: constant.leftMargin,
    y: canvasHeight * (3 / 4) + constant.verticalSeparator,
    width: canvasWidth - constant.rightMargin - constant.leftMargin,
    height: canvasHeight * (1 / 4) - constant.verticalSeparator
  },
  pc: {
    x: canvasWidth - constant.rightMargin + constant.horizontalSeparator,
    y: 0,
    width: constant.rightMargin - constant.horizontalSeparator,
    height: canvasHeight + constant.verticalSeparator
  }
};

mapContainer = svg.append("g").attr("transform", "translate(" + bb.map.x + ", " + bb.map.y + ")");

keyFrame = svg.append("g").attr("id", "keyFrame").attr("transform", "translate(" + (bb.map.width + constant.horizontalSeparator / 2) + ", " + bb.map.y + ")");

mapContainer.append("clipPath").attr("id", "mapClip").append("rect").attr("width", bb.map.width).attr("height", bb.map.height);

mapMask = mapContainer.append("g").attr("clip-path", "url(#mapClip)");

mapFrame = mapMask.append("g").attr("id", "mapFrame").attr("width", bb.map.width).attr("height", bb.map.height).style("stroke-width", "" + constant.stateBorderWidth + "px");

blockContextMenu = function(event) {
  return event.preventDefault();
};

document.querySelector('#mapFrame').addEventListener('contextmenu', blockContextMenu);

zoomedCounty = d3.select(null);

zoomChoropleth = function(d) {
  var bounds, dx, dy, scale, translate, x, y;
  if (zoomedCounty.node() === this) {
    return resetChoropleth();
  }
  zoomedCounty.classed("zoomed", false);
  zoomedCounty = d3.select(this).classed("zoomed", true);
  bounds = path.bounds(d);
  dx = bounds[1][0] - bounds[0][0] + constant.zoomBox;
  dy = bounds[1][1] - bounds[0][1] + constant.zoomBox;
  x = (bounds[0][0] + bounds[1][0]) / 2;
  y = (bounds[0][1] + bounds[1][1]) / 2;
  scale = 0.9 / Math.max(dx / bb.map.width, dy / bb.map.height);
  translate = [bb.map.width / 2 - scale * x, bb.map.height / 2 - scale * y];
  return mapFrame.transition().duration(constant.choroplethDuration).style("stroke-width", "" + (constant.stateBorderWidth / scale) + "px").attr("transform", "translate(" + translate + ")scale(" + scale + ")");
};

resetChoropleth = function() {
  zoomedCounty.classed("zoomed", false);
  zoomedCounty = d3.select(null);
  return mapFrame.transition().duration(constant.choroplethDuration).style("stroke-width", "" + constant.stateBorderWidth + "px").attr("transform", "");
};

mapFrame.append("rect").attr("id", "mapBackground").attr("width", bb.map.width).attr("height", bb.map.height).on("click", resetChoropleth);

graphContainer = svg.append("g").attr("transform", "translate(" + (bb.graph.x - constant.leftMargin) + ", " + (bb.graph.y - constant.verticalSeparator) + ")");

graphContainer.append("clipPath").attr("id", "graphClip").append("rect").attr("width", bb.graph.width + constant.leftMargin + constant.graphClipHorizontalOffset).attr("height", bb.graph.height + constant.verticalSeparator + constant.graphClipVerticalOffset);

graphMask = graphContainer.append("g").attr("clip-path", "url(#graphClip)");

graphFrame = graphMask.append("g").attr("transform", "translate(" + constant.leftMargin + ", " + constant.verticalSeparator + ")").attr("id", "graphFrame").attr("width", bb.map.width).attr("height", bb.map.height);

parseDate = d3.time.format("%Y-%m").parse;

graphXScale = d3.time.scale().range([0, bb.graph.width]).clamp(true);

graphYScale = d3.scale.linear().range([bb.graph.height, constant.verticalSeparator / 2]);

graphXAxis = d3.svg.axis().scale(graphXScale).orient("bottom");

graphYAxis = d3.svg.axis().scale(graphYScale).ticks([5]).orient("left");

graphLine = d3.svg.line().interpolate("linear").x(function(d, i) {
  return graphXScale(nationalData.dates[i]);
}).y(function(d) {
  return graphYScale(+d);
});

scaleY = function(countyArray, nationalValues) {
  var allValues, point, _i, _len;
  allValues = [].concat(nationalValues.map(function(n) {
    return +n;
  }));
  for (_i = 0, _len = countyArray.length; _i < _len; _i++) {
    point = countyArray[_i];
    allValues.push(+point);
  }
  graphYScale.domain(d3.extent(allValues));
  return yAxis.transition().duration(constant.graphDuration).call(graphYAxis);
};

activeCounty = d3.select(null);

countyAdded = false;

zeroes = [];

modifyGraph = function(d, nationalValues, t) {
  var countyArray;
  if (activeCounty.node() === t) {
    return;
  }
  activeCounty.style("fill", function(d) {
    return color(d.properties[activeDimension][timeSlice]);
  });
  activeCounty = d3.select(t).style("fill", "#fd8d3c");
  countyArray = d.properties[activeDimension];
  if (!countyAdded) {
    countyAdded = true;
    nationalTitle.transition().duration(constant.graphDuration).attr("transform", function(d) {
      return "translate(" + (bb.graph.width / 2 + constant.nationalTitleOffset) + ", 0)";
    });
    vsText = graphFrame.append("text").attr("class", "title vs").attr("text-anchor", "middle").attr("transform", "translate(" + (bb.graph.width * 1.5) + ", 0)").style("opacity", 0).text("vs.");
    vsText.transition().duration(constant.graphDuration).style("opacity", 1).attr("transform", "translate(" + (bb.graph.width / 2 + constant.vsOffset) + ", 0)");
    countyTitle = graphFrame.append("text").attr("class", "title county").attr("text-anchor", "start").attr("transform", "translate(" + (bb.graph.width * 1.5) + ", 0)").style("opacity", 0).text("" + d.properties.name);
    countyTitle.transition().duration(constant.graphDuration).style("opacity", 1).attr("transform", "translate(" + (bb.graph.width / 2 + constant.countyTitleOffset) + ", 0)");
    scaleY(countyArray, nationalValues);
    nationalLine.transition().duration(constant.graphDuration).attr("d", graphLine);
    nationalPoints.transition().duration(constant.graphDuration).attr("transform", function(d, i) {
      return "translate(" + (graphXScale(nationalData.dates[i])) + ", " + (graphYScale(d)) + ")";
    });
    zeroes = [];
    countyArray.forEach(function() {
      return zeroes.push(0);
    });
    countyLine = graphFrame.append("path").datum(zeroes).attr("class", "line county invisible").attr("d", graphLine);
    countyPoints = graphFrame.selectAll(".point.county.invisible").data(zeroes).enter().append("circle").attr("class", "point county invisible").attr("transform", function(d, i) {
      return "translate(" + (graphXScale(nationalData.dates[i])) + ", " + (graphYScale(d)) + ")";
    }).attr("r", 3);
    countyPoints.on("mouseover", function(d) {
      d3.select("#tooltip").classed("hidden", false).style("left", "" + (d3.event.pageX + constant.tooltipOffset) + "px").style("top", "" + (d3.event.pageY + constant.tooltipOffset) + "px");
      return d3.select("#county").html(function() {
        return "" + (formats[activeDimension](d));
      });
    });
    countyPoints.on("mouseout", function(d) {
      return d3.select("#tooltip").classed("hidden", true);
    });
    countyLine.datum(countyArray).attr("class", "line county").transition().duration(constant.graphDuration).attr("d", graphLine);
    return countyPoints.data(countyArray).attr("class", "point county").transition().duration(constant.graphDuration).attr("transform", function(d, i) {
      return "translate(" + (graphXScale(nationalData.dates[i])) + ", " + (graphYScale(d)) + ")";
    });
  } else {
    countyTitle.transition().duration(constant.graphDuration / 2).attr("transform", "translate(" + (bb.graph.width / 2 + constant.countyTitleOffset) + ", " + constant.verticalSeparator + ")").style("opacity", 0).remove();
    countyTitle = graphFrame.append("text").attr("class", "title county").attr("text-anchor", "start").attr("transform", "translate(" + (bb.graph.width / 2 + constant.countyTitleOffset) + ", " + (-constant.verticalSeparator) + ")").style("opacity", 0).text("" + d.properties.name);
    countyTitle.transition().delay(constant.graphDuration / 2).duration(constant.graphDuration / 2).attr("transform", "translate(" + (bb.graph.width / 2 + constant.countyTitleOffset) + ", 0)").style("opacity", 1);
    scaleY(countyArray, nationalValues);
    nationalLine.transition().duration(constant.graphDuration).attr("d", graphLine);
    nationalPoints.transition().duration(constant.graphDuration).attr("transform", function(d, i) {
      return "translate(" + (graphXScale(nationalData.dates[i])) + ", " + (graphYScale(d)) + ")";
    });
    countyLine.datum(countyArray).transition().duration(constant.graphDuration).attr("d", graphLine);
    return countyPoints.data(countyArray).transition().duration(constant.graphDuration).attr("transform", function(d, i) {
      return "translate(" + (graphXScale(nationalData.dates[i])) + ", " + (graphYScale(d)) + ")";
    });
  }
};

pcFrame = svg.append("g").attr("id", "pcFrame").attr("transform", "translate(" + bb.pc.x + ", " + bb.pc.y + ")");

compressedData = [];

_ref2 = [null, null, null, null], pcForeground = _ref2[0], pcBackground = _ref2[1], pcFocus = _ref2[2], pcNational = _ref2[3];

pcy = d3.scale.ordinal().rangePoints([0, bb.pc.height], constant.pcOffset);

pcx = {};

for (_i = 0, _len = dimensions.length; _i < _len; _i++) {
  dimension = dimensions[_i];
  pcx[dimension] = d3.scale.linear().range([0, bb.pc.width]);
}

line = d3.svg.line();

axis = d3.svg.axis().orient("bottom").ticks(4);

axisk = d3.svg.axis().orient("bottom").tickFormat(function(d) {
  return formatk(d);
});

axisk.ticks(4);

pcy.domain(dimensions);

compressData = function(data) {
  var add, countyData, dataPoint, properties, _j, _k, _len1, _len2;
  compressedData = [];
  for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
    countyData = data[_j];
    properties = countyData.properties;
    dataPoint = {
      "id": +countyData.id
    };
    add = true;
    for (_k = 0, _len2 = dimensions.length; _k < _len2; _k++) {
      dimension = dimensions[_k];
      if (properties[dimension].length === 0) {
        add = false;
        continue;
      }
      dataPoint[dimension] = properties[dimension];
    }
    if (add) {
      compressedData.push(dataPoint);
    }
  }
  return compressedData;
};

pcPath = function(d) {
  return line(dimensions.map(function(dimension) {
    if (d[dimension][timeSlice] === "") {
      return [bb.pc.width / 2, pcy(dimension)];
    }
    return [pcx[dimension](+d[dimension][timeSlice]), pcy(dimension)];
  }));
};

defaultPath = " M 10 25";

pcBrush = function() {
  var activeCounties, actives, extents;
  activeCounties = {};
  actives = dimensions.filter(function(p) {
    return !pcx[p].brush.empty();
  });
  extents = actives.map(function(p) {
    return pcx[p].brush.extent();
  });
  pcForeground.classed("hidden", function(d) {
    var allmet;
    allmet = actives.every(function(p, i) {
      var value;
      value = d[p][timeSlice];
      return (extents[i][0] <= value) && (value <= extents[i][1]);
    });
    if (allmet === true) {
      activeCounties[+d.id] = true;
      return false;
    } else {
      activeCounties[+d.id] = false;
      return true;
    }
  });
  return counties.classed("hidden", function(e) {
    var countyID;
    countyID = +e.id;
    if ((countyID in activeCounties) === false) {
      if (extents.length > 0) {
        return true;
      }
      return false;
    } else if (activeCounties[countyID]) {
      return false;
    }
    return true;
  });
};

containsAll = function(d) {
  var add, _j, _len1;
  add = true;
  for (_j = 0, _len1 = dimensions.length; _j < _len1; _j++) {
    dimension = dimensions[_j];
    if (d[dimension][timeSlice] === "") {
      add = false;
      continue;
    }
  }
  return add;
};

drawPC = function() {
  pcBackground.attr("d", function(d) {
    if (containsAll(d)) {
      return pcPath(d);
    }
    return defaultPath;
  }).attr("class", function(d) {
    if (containsAll(d) === false) {
      return "hidden";
    }
  });
  pcForeground.attr("d", function(d) {
    if (containsAll(d)) {
      return pcPath(d);
    }
    return defaultPath;
  }).classed("hidden", function(d) {
    if (containsAll(d) === false) {
      return true;
    }
    return false;
  });
  pcFocus.attr("d", function(d) {
    if (containsAll(d)) {
      return pcPath(d);
    }
    return defaultPath;
  });
  pcNational.attr("d", pcPath);
  return pcBrush();
};

mapX = bb.map.width / 2 + constant.horizontalSeparator;

mapY = bb.map.height / 2;

projection = d3.geo.albersUsa().scale(1.25 * bb.map.width).translate([mapX, mapY]);

path = d3.geo.path().projection(projection);

color = d3.scale.threshold().range(colorbrewer.YlGn[9]);

drawVisualization = function(firstTime) {
  var allCountyValues, backgroundCounties, brush, brushed, count, countyData, dimensionExtent, g, handle, keyBoxPadding, keyBoxRatio, keyBoxSize, moveBrush, nationalValues, roundedPosition, slider, sliderScale, swatch, timeslice, update, _j, _k, _l, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p, _ref3, _ref4;
  nationalValues = nationalData[activeDimension];
  color.domain(colorDomains[activeDimension]);
  if (firstTime) {
    allCountyData = topojson.feature(usGeo, usGeo.objects.counties).features;
    backgroundCounties = mapFrame.append("g").selectAll(".backgroundCounty").data(allCountyData).enter().append("path").attr("d", path).style("fill", "#d9d9d9").style("opacity", 1.0).on("click", zoomChoropleth);
    counties = mapFrame.append("g").attr("id", "counties").selectAll(".county").data(allCountyData).enter().append("path").attr("class", function(d) {
      return "county c" + (+d.id);
    }).attr("d", path).style("fill", function(d) {
      var countyData;
      countyData = d.properties[activeDimension];
      if (countyData.length === 0) {
        return "#d9d9d9";
      } else {
        if (countyData[timeSlice] === "") {
          return "#d9d9d9";
        } else {
          return color(countyData[timeSlice]);
        }
      }
    }).style("opacity", 1.0).on("click", zoomChoropleth);
    mapFrame.append("path").attr("id", "state-borders").datum(topojson.mesh(usGeo, usGeo.objects.states, function(a, b) {
      return a !== b;
    })).attr("d", path);
    count = 0;
    keyBoxSize = bb.map.height / ((keyLabels[activeDimension].length + 2) * 2.4);
    keyBoxRatio = 1 / 3;
    keyBoxPadding = keyBoxSize * 0.2;
    _ref3 = colorbrewer.YlGn[9];
    for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
      swatch = _ref3[_j];
      if (swatch === "#ffffe5") {
        continue;
      }
      keyFrame.append("rect").attr("width", keyBoxSize).attr("height", keyBoxSize).attr("transform", "translate(" + (constant.horizontalSeparator / 2) + ", " + (bb.map.height * keyBoxRatio + count * (keyBoxSize + keyBoxPadding)) + ")").style("fill", swatch).style("stroke", "gray").style("stroke-opacity", 0.1);
      keyFrame.append("text").attr("class", "keyLabel").attr("transform", "translate(" + (constant.horizontalSeparator * 1.8) + ", " + (bb.map.height * keyBoxRatio + (count + 0.6) * (keyBoxSize + keyBoxPadding)) + ")").text(keyLabels[activeDimension][count]);
      count += 1;
    }
    keyFrame.append("rect").attr("width", keyBoxSize).attr("height", keyBoxSize).attr("transform", "translate(" + (constant.horizontalSeparator / 2) + ", " + (bb.map.height * keyBoxRatio + (count + 1) * (keyBoxSize + keyBoxPadding)) + ")").style("fill", "#d9d9d9").style("stroke-opacity", 0.2);
    keyFrame.append("text").attr("transform", "translate(" + (constant.horizontalSeparator * 1.8) + ", " + (bb.map.height * keyBoxRatio + (count + 1.6) * (keyBoxSize + keyBoxPadding)) + ")").text("Data unavailable");
    count += 1;
    keyFrame.append("rect").attr("width", keyBoxSize).attr("height", keyBoxSize).attr("transform", "translate(" + (constant.horizontalSeparator / 2) + ", " + (bb.map.height * keyBoxRatio + (count + 1) * (keyBoxSize + keyBoxPadding)) + ")").style("fill", "#696969").style("stroke-opacity", 0.2);
    keyFrame.append("text").attr("transform", "translate(" + (constant.horizontalSeparator * 1.8) + ", " + (bb.map.height * keyBoxRatio + (count + 1.6) * (keyBoxSize + keyBoxPadding)) + ")").text("Not selected");
  } else {
    counties.transition().duration(constant.recolorDuration).style("fill", function(d) {
      var countyData;
      countyData = d.properties[activeDimension];
      if (countyData.length === 0) {
        return "#d9d9d9";
      } else if (countyData[timeSlice] === "") {
        return "#d9d9d9";
      }
      return color(countyData[timeSlice]);
    });
    d3.selectAll(".keyLabel").text(function(d, i) {
      return keyLabels[activeDimension][i];
    });
  }
  counties.on("contextmenu", function(d) {
    if (d.properties[activeDimension].length === 0) {

    } else if (d.properties[activeDimension][timeSlice] === "") {

    } else {
      modifyGraph(d, nationalValues, this);
      return pcFocus.classed("hidden", function(e) {
        if (+e.id === +d.id) {
          return false;
        }
        return true;
      });
    }
  });
  counties.on("mouseover", function(d) {
    if (d.properties[activeDimension].length === 0) {

    } else if (d.properties[activeDimension][timeSlice] === "") {

    } else {
      d3.select(this).style("opacity", 0.8);
    }
    d3.select("#tooltip").style("left", "" + (d3.event.pageX + constant.tooltipOffset) + "px").style("top", "" + (d3.event.pageY + constant.tooltipOffset) + "px").classed("hidden", false);
    return d3.select("#county").html(function() {
      if (d.properties[activeDimension].length === 0 || d.properties[activeDimension][timeSlice] === "") {
        return "" + d.properties.name;
      }
      return "" + d.properties.name + "<br><br>" + (formats[activeDimension](d.properties[activeDimension][timeSlice]));
    });
  });
  counties.on("mouseout", function(d) {
    d3.select("#tooltip").classed("hidden", true);
    return d3.select(this).transition().duration(250).style("opacity", 1.0);
  });
  if (firstTime) {
    compressedData = compressData(allCountyData);
    allCountyValues = {};
    for (_k = 0, _len2 = dimensions.length; _k < _len2; _k++) {
      dimension = dimensions[_k];
      allCountyValues[dimension] = [];
    }
    for (_l = 0, _len3 = compressedData.length; _l < _len3; _l++) {
      countyData = compressedData[_l];
      for (_m = 0, _len4 = dimensions.length; _m < _len4; _m++) {
        dimension = dimensions[_m];
        _ref4 = countyData[dimension];
        for (_n = 0, _len5 = _ref4.length; _n < _len5; _n++) {
          timeslice = _ref4[_n];
          if (timeslice !== "") {
            allCountyValues[dimension].push(+timeslice);
          }
        }
      }
    }
    for (_o = 0, _len6 = dimensions.length; _o < _len6; _o++) {
      dimension = dimensions[_o];
      dimensionExtent = d3.extent(allCountyValues[dimension]);
      pcScales[dimension] = [dimensionExtent[0] * 0.9, dimensionExtent[1] * 1.05];
    }
    for (_p = 0, _len7 = dimensions.length; _p < _len7; _p++) {
      dimension = dimensions[_p];
      pcx[dimension].domain(pcScales[dimension]);
    }
    pcBackground = pcFrame.append("g").attr("class", "pcBackground").selectAll("path").data(compressedData).enter().append("path");
    pcForeground = pcFrame.append("g").attr("class", "pcForeground").selectAll("path").data(compressedData).enter().append("path");
    pcFocus = pcFrame.append("g").attr("class", "pcFocus").selectAll("path").data(compressedData).enter().append("path").attr("class", "hidden");
    pcNational = pcFrame.append("g").datum(nationalData).attr("class", "pcNational").append("path");
    g = pcFrame.selectAll(".dimension").data(dimensions).enter().append("g").attr("class", "dimension").attr("transform", function(d) {
      return "translate(0, " + (pcy(d)) + ")";
    });
    g.append("g").attr("class", "pcAxis").each(function(d) {
      if (d === 'MedianListPrice') {
        return d3.select(this).call(axisk.scale(pcx[d]));
      } else {
        return d3.select(this).call(axis.scale(pcx[d]));
      }
    }).append("text").attr("text-anchor", "end").attr("x", bb.pc.width).attr("y", -9).text(function(d) {
      return labels[d];
    });
    g.append("g").attr("class", "pcBrush").each(function(d) {
      return d3.select(this).call(pcx[d].brush = d3.svg.brush().x(pcx[d]).on("brush", pcBrush));
    }).selectAll("rect").attr("y", -8).attr("height", 16);
    drawPC();
  }
  graphYScale.domain(d3.extent(nationalValues));
  if (firstTime) {
    graphXScale.domain([nationalData.dates[0], nationalData.dates[nationalData.dates.length - 1]]);
    graphFrame.append("g").attr("class", "x axis").attr("transform", "translate(0, " + bb.graph.height + ")").call(graphXAxis);
    yAxis = graphFrame.append("g").attr("class", "y axis").call(graphYAxis);
    nationalTitle = graphFrame.append("text").attr("class", "title national").attr("text-anchor", "middle").attr("transform", "translate(" + (bb.graph.width / 2) + ", 0)").text("National Trend");
    yLabel = graphFrame.append("text").attr("class", "y label").attr("text-anchor", "end").attr("y", constant.labelY).attr("dy", ".75em").attr("transform", "rotate(-90)").text(labels[activeDimension]);
    nationalLine = graphFrame.append("path").datum(nationalData[activeDimension]).attr("class", "line national").attr("d", graphLine);
    nationalPoints = graphFrame.selectAll(".point.national").data(nationalData[activeDimension]).enter().append("circle").attr("class", "point national").attr("transform", function(d, i) {
      return "translate(" + (graphXScale(nationalData.dates[i])) + ", " + (graphYScale(+d)) + ")";
    }).attr("r", 3);
    nationalPoints.on("mouseover", function(d) {
      d3.select("#tooltip").classed("hidden", false).style("left", "" + (d3.event.pageX + constant.tooltipOffset) + "px").style("top", "" + (d3.event.pageY + constant.tooltipOffset) + "px");
      return d3.select("#county").html(function() {
        return "" + (formats[activeDimension](d));
      });
    });
    nationalPoints.on("mouseout", function(d) {
      return d3.select("#tooltip").classed("hidden", true);
    });
    sliderScale = d3.scale.linear().domain([0, nationalValues.length - 1]).range([0, bb.graph.width]).clamp(true);
    roundedPosition = null;
    update = function() {
      return counties.style("fill", function(d) {
        var countyDataTime;
        countyData = d.properties[activeDimension];
        if (countyData.length === 0) {
          return "#d9d9d9";
        } else {
          countyDataTime = countyData[timeSlice];
          if (countyDataTime === "") {
            return "#d9d9d9";
          }
        }
        return color(countyDataTime);
      });
    };
    brushed = function() {
      var rawPosition;
      rawPosition = brush.extent()[0];
      roundedPosition = Math.round(rawPosition);
      if (d3.event.sourceEvent) {
        rawPosition = sliderScale.invert(d3.mouse(this)[0]);
        roundedPosition = Math.round(rawPosition);
        brush.extent([rawPosition, rawPosition]);
      }
      handle.attr("cx", sliderScale(rawPosition));
      if (timeSlice !== roundedPosition) {
        timeSlice = roundedPosition;
        return update();
      }
    };
    brush = d3.svg.brush().x(sliderScale).extent([0, 0]).on("brushstart", function() {
      return handle.transition().duration(constant.snapbackDuration).attr("r", constant.handleRadius * 1.2).style("fill", "white");
    }).on("brush", brushed).on("brushend", function() {
      handle.transition().duration(constant.snapbackDuration).attr("cx", sliderScale(roundedPosition)).attr("r", constant.handleRadius).style("fill", "black");
      return window.setTimeout(drawPC, constant.snapbackDuration);
    });
    slider = graphFrame.append("g").attr("class", "slider").attr("transform", "translate(0, " + bb.graph.height + ")").call(brush);
    slider.selectAll(".extent,.resize").remove();
    handle = slider.append("circle").attr("class", "handle").attr("r", constant.handleRadius).style("stroke", "black").style("fill", "black");
    moveBrush = function(delay, duration, value) {
      return slider.transition().delay(delay).duration(duration).call(brush.event).call(brush.extent([value, value])).call(brush.event);
    };
    window.focus();
    return d3.select(window).on("keydown", function() {
      var keyPressed;
      keyPressed = d3.event.keyCode;
      if (keyPressed === 39) {
        if (timeSlice < 40) {
          timeSlice = timeSlice + 1;
          moveBrush(0, 250, timeSlice);
        }
      }
      if (keyPressed === 37) {
        if (timeSlice > 0) {
          timeSlice = timeSlice - 1;
          return moveBrush(0, 250, timeSlice);
        }
      }
    });
  } else {
    yAxis.transition().duration(constant.graphDurationDimSwitch).call(graphYAxis);
    if (vsText !== null) {
      vsText.transition().duration(constant.graphDurationDimSwitch).attr("transform", "translate(" + (bb.graph.width / 2 + constant.vsOffset) + ", " + constant.verticalSeparator + ")").style("opacity", 0).remove();
      countyTitle.transition().duration(constant.graphDurationDimSwitch).attr("transform", "translate(" + (bb.graph.width / 2 + constant.countyTitleOffset) + ", " + constant.verticalSeparator + ")").style("opacity", 0).remove();
    }
    nationalTitle.transition().duration(constant.graphDurationDimSwitch).attr("transform", "translate(" + (bb.graph.width / 2) + ", 0)");
    yLabel.transition().duration(constant.graphDurationDimSwitch / 2).style("opacity", 0);
    yLabel.transition().delay(constant.graphDurationDimSwitch / 2).duration(constant.graphDurationDimSwitch / 2).text(labels[activeDimension]).style("opacity", 1);
    if (countyLine !== null) {
      countyLine.remove();
      countyPoints.remove();
    }
    nationalLine.datum(nationalData[activeDimension]).transition().duration(constant.graphDurationDimSwitch).attr("d", graphLine);
    return nationalPoints.data(nationalData[activeDimension]).transition().duration(constant.graphDurationDimSwitch).attr("transform", function(d, i) {
      return "translate(" + (graphXScale(nationalData.dates[i])) + ", " + (graphYScale(d)) + ")";
    });
  }
};

firstTime = true;

d3.selectAll(".btn").on("mouseover", function() {
  if (activeButton.node() === this) {
    return;
  }
  return d3.select(this).style("color", "#000").style("background-color", "#fff");
}).on("mouseout", function() {
  if (activeButton.node() === this) {
    return;
  }
  return d3.select(this).transition().duration(250).style("color", "#fff").style("background-color", "#000");
}).on("click", function() {
  if (+this.value === dimensions.indexOf(activeDimension)) {

  } else {
    activeButton.style("color", "#fff").style("background-color", "#000");
    activeButton = d3.select(this).style("color", "#000").style("background-color", "#fff");
    activeDimension = dimensions[this.value];
    countyAdded = false;
    activeCounty = d3.select(null);
    return drawVisualization(firstTime);
  }
});

loadingContainer = svg.append("g").attr("transform", "translate(" + (canvasWidth / 2) + ", " + (canvasHeight / 2) + ")");

indicator = loadingContainer.append("g").attr("class", "progress-meter");

indicator.append("text").attr("text-anchor", "middle").attr("dy", ".35em").text("Loading...");

d3.json("data/compressed-nationwide-data.json", function(nationwide) {
  return d3.json("data/compressed-augmented-us-states-and-counties.json").get(function(error, us) {
    var _ref3;
    indicator.transition().delay(250).attr("transform", "scale(0)");
    _ref3 = [nationwide, us], nationalData = _ref3[0], usGeo = _ref3[1];
    nationalData.dates = nationalData.dates.map(function(dateString) {
      return parseDate(dateString);
    });
    timeSlice = 0;
    drawVisualization(firstTime);
    return firstTime = !firstTime;
  });
});
